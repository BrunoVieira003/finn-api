// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: account.sql

package models

import (
	"context"

	"github.com/google/uuid"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (name, amount)
VALUES ($1, 0)
RETURNING id, name, amount
`

func (q *Queries) CreateAccount(ctx context.Context, name string) (Account, error) {
	row := q.db.QueryRow(ctx, createAccount, name)
	var i Account
	err := row.Scan(&i.ID, &i.Name, &i.Amount)
	return i, err
}

const findAccountById = `-- name: FindAccountById :one
SELECT id, name, amount FROM accounts WHERE id = $1
`

func (q *Queries) FindAccountById(ctx context.Context, id uuid.UUID) (Account, error) {
	row := q.db.QueryRow(ctx, findAccountById, id)
	var i Account
	err := row.Scan(&i.ID, &i.Name, &i.Amount)
	return i, err
}

const listAccounts = `-- name: ListAccounts :many
SELECT id, name, amount FROM accounts ORDER BY name
`

func (q *Queries) ListAccounts(ctx context.Context) ([]Account, error) {
	rows, err := q.db.Query(ctx, listAccounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(&i.ID, &i.Name, &i.Amount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
